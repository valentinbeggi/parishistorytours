---
import BookingCalendar from "./BookingCalendar.tsx";
---

{/* Section Book your tour */}
<div class="mb-16">
	<h2 class="text-3xl md:text-4xl font-bold text-center mb-4 text-gray-800">Book your tour</h2>
	<p class="text-center text-gray-600 mb-12 text-lg">Let's organize your visit step by step</p>
	
	<div class="max-w-4xl mx-auto px-4">
		{/* Étape 1: Choix du tour */}
		<div class="bg-white rounded-xl shadow-lg p-8 border border-gray-100">
			<h3 class="text-xl font-semibold text-gray-800 mb-6">Step 1: Choose your tour</h3>
			
			<div class="flex flex-col md:flex-row gap-6 justify-center items-center" id="tour-selection">
				{/* Left Bank Option */}
				<div class="tour-option w-full md:w-1/2 max-w-sm cursor-pointer transition-all duration-300" data-tour="left-bank">
					<div class="relative rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow">
						<img src={"/photos/pantheon_de_Paris.webp"} alt="Left Bank Tour" class="w-full h-48 object-cover" />
						<div class="absolute inset-0 bg-black/20 flex items-center justify-center">
							<span class="text-white text-2xl font-bold tracking-wider drop-shadow-lg">Left Bank</span>
						</div>
					</div>
					<p class="text-center text-gray-600 mt-3 text-sm">Resistance & Liberation</p>
				</div>
				
				{/* Right Bank Option */}
				<div class="tour-option w-full md:w-1/2 max-w-sm cursor-pointer transition-all duration-300" data-tour="right-bank">
					<div class="relative rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow">
						<img src={"/photos/place_vendome_paris.webp"} alt="Right Bank Tour" class="w-full h-48 object-cover" />
						<div class="absolute inset-0 bg-black/20 flex items-center justify-center">
							<span class="text-white text-2xl font-bold tracking-wider drop-shadow-lg">Right Bank</span>
						</div>
					</div>
					<p class="text-center text-gray-600 mt-3 text-sm">Occupation & Collaboration</p>
				</div>
			</div>
			
			{/* Tour sélectionné */}
			<div class="hidden mt-8 text-center" id="selected-tour">
				<button class="text-blue-500 text-sm font-medium hover:text-blue-600 transition cursor-pointer" id="change-tour">
					← Change tour selection
				</button>
			</div>
		</div>

		{/* Étape 2: Nombre de personnes - Hidden by default */}
		<div class="hidden bg-white rounded-xl shadow-lg p-8 border border-gray-100 mt-6" id="step-participants">
			<h3 class="text-xl font-semibold text-gray-800 mb-6">Step 2: Number of participants</h3>
			
			<div class="space-y-4">
				{/* Options 1-4 personnes */}
				<div class="flex gap-3 justify-center">
					{Array.from({ length: 4 }, (_, i) => (
						<button 
							class="participant-option p-3 border-2 border-gray-200 rounded-lg text-center hover:border-blue-400 hover:bg-blue-50 transition-all duration-200 cursor-pointer min-w-16"
							data-count={i + 1}
						>
							<div class="text-xl font-bold text-gray-700">{i + 1}</div>
							<div class="text-xs text-gray-500">
								{i === 0 ? 'person' : 'people'}
							</div>
						</button>
					))}
				</div>

				{/* Option "5 or more" */}
				<div class="border-t border-gray-200 pt-4">
					<div class="flex items-center gap-4 justify-center">
						<span class="text-gray-700 font-medium">5 or more people:</span>
						<select 
							class="border border-gray-300 rounded-lg px-3 py-2 bg-white focus:border-blue-400 focus:outline-none cursor-pointer"
							id="more-participants"
						>
							<option value="">Select...</option>
							{Array.from({ length: 6 }, (_, i) => (
								<option value={i + 5}>{i + 5} people</option>
							))}
						</select>
					</div>
				</div>
			</div>
		</div>

		{/* Étape 3: Type de tour - Hidden by default */}
		<div class="hidden bg-white rounded-xl shadow-lg p-8 border border-gray-100 mt-6" id="step-tour-type">
			<h3 class="text-xl font-semibold text-gray-800 mb-6">Step 3: Choose your tour type</h3>
			
			<div class="flex flex-col md:flex-row gap-6 justify-center">
				{/* Regular Tour Option */}
				<div class="tour-type-option flex-1 max-w-sm cursor-pointer transition-all duration-200 p-4 border-2 border-gray-200 rounded-lg hover:border-blue-400 hover:bg-blue-50" data-type="regular">
					<div class="text-center">
						<h4 class="text-lg font-semibold text-gray-800 mb-2">Regular Tour</h4>
						<p class="text-sm text-gray-600">Join a tour with up to 10 travelers</p>
					</div>
				</div>
				
				{/* Private Tour Option */}
				<div class="tour-type-option flex-1 max-w-sm cursor-pointer transition-all duration-200 p-4 border-2 border-gray-200 rounded-lg hover:border-blue-400 hover:bg-blue-50" data-type="private">
					<div class="text-center">
						<h4 class="text-lg font-semibold text-gray-800 mb-2">Private Tour</h4>
						<p class="text-sm text-gray-600">Schedule a private tour for your group only</p>
					</div>
				</div>
			</div>
		</div>

		{/* Étape 4a: Calendrier pour Regular Tour - Hidden by default */}
		<div class="hidden bg-white rounded-xl shadow-lg p-8 border border-gray-100 mt-6" id="step-calendar">
			<h3 class="text-xl font-semibold text-gray-800 mb-6">Step 4: Choose a date</h3>
			
			{/* Intégration du BookingCalendar React */}
			<div id="booking-calendar-container" class="hidden flex justify-center">
				<!-- Calendrier pour Left Bank -->
				<div id="left-bank-calendar" class="hidden">
					<BookingCalendar tour="left-bank" client:load />
				</div>
				<!-- Calendrier pour Right Bank -->
				<div id="right-bank-calendar" class="hidden">
					<BookingCalendar tour="right-bank" client:load />
				</div>
			</div>
		</div>

		{/* Étape 4b: Date/Heure pour Private Tour - Hidden by default */}
		<div class="hidden bg-white rounded-xl shadow-lg p-8 border border-gray-100 mt-6" id="step-date-time">
			<h3 class="text-xl font-semibold text-gray-800 mb-6">Step 4: Choose your preferred date and time</h3>
			
			<div class="space-y-6">
				{/* Sélection de date */}
				<div>
					<label for="tour-date" class="block text-sm font-medium text-gray-700 mb-2">Preferred Date</label>
					<input 
						type="date" 
						id="tour-date"
						class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-400 focus:outline-none"
						min={new Date().toISOString().split('T')[0]}
					/>
				</div>

				{/* Sélection d'heure */}
				<div>
					<label for="tour-time" class="block text-sm font-medium text-gray-700 mb-2">Preferred Time</label>
					<select 
						id="tour-time"
						class="w-full border border-gray-300 rounded-lg px-3 py-2 bg-white focus:border-blue-400 focus:outline-none"
					>
						<option value="">Select a time...</option>
						<option value="08:00">8:00 AM</option>
						<option value="09:00">9:00 AM</option>
						<option value="10:00">10:00 AM</option>
						<option value="11:00">11:00 AM</option>
						<option value="12:00">12:00 PM</option>
						<option value="13:00">1:00 PM</option>
						<option value="14:00">2:00 PM</option>
						<option value="15:00">3:00 PM</option>
						<option value="16:00">4:00 PM</option>
						<option value="17:00">5:00 PM</option>
						<option value="18:00">6:00 PM</option>
					</select>
				</div>

				{/* Note explicative */}
				<div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
					<p class="text-sm text-blue-700">
						<strong>Note:</strong> This is your preferred date and time. We will confirm availability and get back to you within 12 hours.
					</p>
				</div>
			</div>
		</div>

		{/* Étape 5: Contact info - Hidden by default */}
		<div class="hidden bg-white rounded-xl shadow-lg p-8 border border-gray-100 mt-6" id="step-contact">
			<h3 class="text-xl font-semibold text-gray-800 mb-6">Step 5: Contact Information</h3>
			
			<div class="space-y-6">
				{/* Nom */}
				<div>
					<label for="contact-name" class="block text-sm font-medium text-gray-700 mb-2">Name *</label>
					<input 
						type="text" 
						id="contact-name"
						required
						class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-400 focus:outline-none"
						placeholder="Your full name"
					/>
				</div>

				{/* Email */}
				<div>
					<label for="contact-email" class="block text-sm font-medium text-gray-700 mb-2">Email *</label>
					<input 
						type="email" 
						id="contact-email"
						required
						class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-400 focus:outline-none"
						placeholder="your.email@example.com"
					/>
				</div>

				{/* Téléphone */}
				<div>
					<label for="contact-phone" class="block text-sm font-medium text-gray-700 mb-2">Phone Number (optional)</label>
					<input 
						type="tel" 
						id="contact-phone"
						class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-blue-400 focus:outline-none"
						placeholder="+33 1 23 45 67 89"
					/>
				</div>
			</div>
		</div>

		{/* Étape 6: Récapitulatif - Hidden by default */}
		<div class="hidden bg-white rounded-xl shadow-lg p-8 border border-gray-100 mt-6" id="step-summary">
			<h3 class="text-xl font-semibold text-gray-800 mb-6">Step 6: Booking Summary</h3>
			
			<div class="space-y-4 mb-8">
				<div class="flex justify-between items-center py-2 border-b border-gray-200">
					<span class="font-medium text-gray-700">Tour:</span>
					<span id="summary-tour" class="text-gray-900"></span>
				</div>
				<div class="flex justify-between items-center py-2 border-b border-gray-200">
					<span class="font-medium text-gray-700">Participants:</span>
					<span id="summary-participants" class="text-gray-900"></span>
				</div>
				<div class="flex justify-between items-center py-2 border-b border-gray-200">
					<span class="font-medium text-gray-700">Tour Type:</span>
					<span id="summary-tour-type" class="text-gray-900"></span>
				</div>
				<div class="flex justify-between items-center py-2 border-b border-gray-200">
					<span class="font-medium text-gray-700">Date & Time:</span>
					<span id="summary-datetime" class="text-gray-900"></span>
				</div>
				<div class="flex justify-between items-center py-2 border-b border-gray-200">
					<span class="font-medium text-gray-700">Contact:</span>
					<span id="summary-contact" class="text-gray-900"></span>
				</div>
			</div>

			<div class="flex gap-4 justify-center">
				<button 
					id="edit-booking" 
					class="px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
				>
					← Edit Details
				</button>
				<button 
					id="confirm-booking" 
					class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
				>
					Confirm and Ask for Booking
				</button>
			</div>
		</div>
	</div>
</div>

<script>
	// Script pour la sélection de tour et participants
	const tourOptions = document.querySelectorAll('.tour-option');
	const selectedTourDiv = document.getElementById('selected-tour');
	const changeTourBtn = document.getElementById('change-tour');
	const stepParticipants = document.getElementById('step-participants');

	// Variables globales pour stocker le tour sélectionné
	let selectedTour: string = '';

	// Function to smoothly scroll to an element
	function scrollToElement(elementId: string, delay: number = 800) {
		setTimeout(() => {
			const element = document.getElementById(elementId);
			if (element) {
				element.scrollIntoView({ 
					behavior: 'smooth', 
					block: 'start',
					inline: 'nearest'
				});
			}
		}, delay);
	}

	tourOptions.forEach(option => {
		option.addEventListener('click', () => {
			// Stocker le tour sélectionné
			selectedTour = (option as HTMLElement).dataset.tour || '';
			
			// ...existing code pour l'animation de sélection de tour...
			
			setTimeout(() => {
				if (stepParticipants) {
					stepParticipants.classList.remove('hidden');
					stepParticipants.style.opacity = '0';
					stepParticipants.style.transition = 'opacity 0.5s ease-in';
					setTimeout(() => {
						stepParticipants.style.opacity = '1';
					}, 50);
				}
				// Scroll to step 2 after it appears
				scrollToElement('step-participants', 500);
			}, 800);
		});
	});

	if (changeTourBtn) {
		changeTourBtn.addEventListener('click', () => {
			// ...existing code pour revenir en arrière...
			if (selectedTourDiv) {
				selectedTourDiv.style.opacity = '0';
				setTimeout(() => {
					selectedTourDiv.classList.add('hidden');
				}, 200);
			}
			
			tourOptions.forEach(opt => {
				(opt as HTMLElement).style.display = 'block';
				(opt as HTMLElement).style.opacity = '1';
				(opt as HTMLElement).style.transform = 'scale(1)';
				(opt as HTMLElement).style.transition = '';
				opt.classList.add('md:w-1/2');
				opt.classList.remove('max-w-sm', 'mx-auto');
			});
			
			if (stepParticipants) {
				stepParticipants.style.opacity = '0';
				setTimeout(() => {
					stepParticipants.classList.add('hidden');
				}, 200);
			}
			
			// Masquer aussi l'étape 3 et 4 si elles sont visibles
			const stepTourType = document.getElementById('step-tour-type');
			const stepCalendar = document.getElementById('step-calendar');
			const stepDateTime = document.getElementById('step-date-time');
			
			if (stepTourType) {
				stepTourType.style.opacity = '0';
				setTimeout(() => {
					stepTourType.classList.add('hidden');
				}, 200);
			}
			
			if (stepCalendar) {
				stepCalendar.style.opacity = '0';
				setTimeout(() => {
					stepCalendar.classList.add('hidden');
				}, 200);
			}
			
			if (stepDateTime) {
				stepDateTime.style.opacity = '0';
				setTimeout(() => {
					stepDateTime.classList.add('hidden');
				}, 200);
			}
		});
	}

	// Script pour la sélection du nombre de participants
	const participantOptions = document.querySelectorAll('.participant-option');
	const moreParticipantsSelect = document.getElementById('more-participants') as HTMLSelectElement;
	const stepTourType = document.getElementById('step-tour-type');

	function selectParticipantCount(count: number) {
		participantOptions.forEach(opt => {
			opt.classList.remove('border-gray-600', 'bg-gray-600', 'text-white');
			opt.classList.add('border-gray-200', 'opacity-50');
			const numberDiv = opt.querySelector('div:first-child');
			const textDiv = opt.querySelector('div:last-child');
			if (numberDiv) numberDiv.classList.remove('text-white');
			if (textDiv) textDiv.classList.remove('text-white');
		});

		if (moreParticipantsSelect) {
			moreParticipantsSelect.value = '';
		}

		// Afficher l'étape 3 après sélection du nombre de participants
		setTimeout(() => {
			if (stepTourType) {
				stepTourType.classList.remove('hidden');
				stepTourType.style.opacity = '0';
				stepTourType.style.transition = 'opacity 0.5s ease-in';
				setTimeout(() => {
					stepTourType.style.opacity = '1';
				}, 50);
			}
			// Scroll to step 3 after it appears
			scrollToElement('step-tour-type', 500);
		}, 300);
	}

	participantOptions.forEach(option => {
		option.addEventListener('click', () => {
			const count = parseInt((option as HTMLElement).dataset.count || '0');
			
			// Vérifier si l'option est déjà sélectionnée
			const isSelected = option.classList.contains('border-gray-600');
			
			if (isSelected) {
				// Désélectionner: revenir à l'état initial et masquer l'étape 3
				participantOptions.forEach(opt => {
					opt.classList.remove('border-gray-600', 'bg-gray-600', 'text-white', 'opacity-50');
					opt.classList.add('border-gray-200');
					const numberDiv = opt.querySelector('div:first-child');
					const textDiv = opt.querySelector('div:last-child');
					if (numberDiv) {
						numberDiv.classList.remove('text-white');
						numberDiv.classList.add('text-gray-700');
					}
					if (textDiv) {
						textDiv.classList.remove('text-white');
						textDiv.classList.add('text-gray-500');
					}
				});
				
				// Masquer l'étape 3
				if (stepTourType) {
					stepTourType.style.opacity = '0';
					setTimeout(() => {
						stepTourType.classList.add('hidden');
					}, 200);
				}
			} else {
				// Sélectionner
				selectParticipantCount(count);
				
				option.classList.remove('border-gray-200', 'opacity-50');
				option.classList.add('border-gray-600', 'bg-gray-600', 'text-white');
				
				const numberDiv = option.querySelector('div:first-child');
				const textDiv = option.querySelector('div:last-child');
				if (numberDiv) {
					numberDiv.classList.remove('text-gray-700');
					numberDiv.classList.add('text-white');
				}
				if (textDiv) {
					textDiv.classList.remove('text-gray-500');
					textDiv.classList.add('text-white');
				}
			}
		});
	});

	if (moreParticipantsSelect) {
		moreParticipantsSelect.addEventListener('change', () => {
			const count = parseInt(moreParticipantsSelect.value);
			if (count) {
				participantOptions.forEach(opt => {
					opt.classList.remove('border-gray-600', 'bg-gray-600', 'text-white');
					opt.classList.add('border-gray-200', 'opacity-50');
					const numberDiv = opt.querySelector('div:first-child');
					const textDiv = opt.querySelector('div:last-child');
					if (numberDiv) {
						numberDiv.classList.remove('text-white');
						numberDiv.classList.add('text-gray-700');
					}
					if (textDiv) {
						textDiv.classList.remove('text-white');
						textDiv.classList.add('text-gray-500');
					}
				});
				
				// Afficher l'étape 3 après sélection de 5 ou plus participants
				setTimeout(() => {
					if (stepTourType) {
						stepTourType.classList.remove('hidden');
						stepTourType.style.opacity = '0';
						stepTourType.style.transition = 'opacity 0.5s ease-in';
						setTimeout(() => {
							stepTourType.style.opacity = '1';
						}, 50);
					}
					// Scroll to step 3 after it appears
					scrollToElement('step-tour-type', 500);
				}, 300);
			}
		});
	}

	// Script pour la sélection du type de tour
	const tourTypeOptions = document.querySelectorAll('.tour-type-option');
	const stepCalendar = document.getElementById('step-calendar');
	const stepDateTime = document.getElementById('step-date-time');

	tourTypeOptions.forEach(option => {
		option.addEventListener('click', () => {
			const tourType = (option as HTMLElement).dataset.type;
			
			// Vérifier si l'option est déjà sélectionnée
			const isSelected = option.classList.contains('border-gray-600');
			
			if (isSelected) {
				// Désélectionner: revenir à l'état initial et masquer l'étape 4
				tourTypeOptions.forEach(opt => {
					opt.classList.remove('border-gray-600', 'bg-gray-600', 'text-white', 'opacity-50');
					opt.classList.add('border-gray-200');
					const title = opt.querySelector('h4');
					const desc = opt.querySelector('p');
					if (title) {
						title.classList.remove('text-white');
						title.classList.add('text-gray-800');
					}
					if (desc) {
						desc.classList.remove('text-gray-200');
						desc.classList.add('text-gray-600');
					}
				});

				// Masquer les étapes 4a et 4b
				if (stepCalendar) {
					stepCalendar.style.opacity = '0';
					setTimeout(() => {
						stepCalendar.classList.add('hidden');
					}, 200);
				}
				if (stepDateTime) {
					stepDateTime.style.opacity = '0';
					setTimeout(() => {
						stepDateTime.classList.add('hidden');
					}, 200);
				}
			} else {
				// Réinitialiser toutes les options
				tourTypeOptions.forEach(opt => {
					opt.classList.remove('border-gray-600', 'bg-gray-600', 'text-white');
					opt.classList.add('border-gray-200', 'opacity-50');
					const title = opt.querySelector('h4');
					const desc = opt.querySelector('p');
					if (title) {
						title.classList.remove('text-white');
						title.classList.add('text-gray-800');
					}
					if (desc) {
						desc.classList.remove('text-gray-200');
						desc.classList.add('text-gray-600');
					}
				});
				
				// Sélectionner l'option cliquée
				option.classList.remove('border-gray-200', 'opacity-50');
				option.classList.add('border-gray-600', 'bg-gray-600', 'text-white');
				
				const title = option.querySelector('h4');
				const desc = option.querySelector('p');
				if (title) {
					title.classList.remove('text-gray-800');
					title.classList.add('text-white');
				}
				if (desc) {
					desc.classList.remove('text-gray-600');
					desc.classList.add('text-gray-200');
				}

				// Afficher l'étape 4 appropriée selon le type de tour
				setTimeout(() => {
					if (tourType === 'regular') {
						// Masquer l'étape private tour si elle était visible
						if (stepDateTime) {
							stepDateTime.classList.add('hidden');
						}
						// Afficher l'étape calendar
						if (stepCalendar) {
							stepCalendar.classList.remove('hidden');
							stepCalendar.style.opacity = '0';
							stepCalendar.style.transition = 'opacity 0.5s ease-in';
							setTimeout(() => {
								stepCalendar.style.opacity = '1';
								// Afficher le bon calendrier selon le tour sélectionné
								showBookingCalendar(selectedTour);
							}, 50);
						}
						// Scroll to step 4 calendar
						scrollToElement('step-calendar', 500);
					} else if (tourType === 'private') {
						// Masquer l'étape calendar si elle était visible
						if (stepCalendar) {
							stepCalendar.classList.add('hidden');
						}
						// Afficher l'étape date/time
						if (stepDateTime) {
							stepDateTime.classList.remove('hidden');
							stepDateTime.style.opacity = '0';
							stepDateTime.style.transition = 'opacity 0.5s ease-in';
							setTimeout(() => {
								stepDateTime.style.opacity = '1';
								// Attach event listeners after the step is visible
								attachPrivateTourListeners();
							}, 50);
						}
						// Scroll to step 4 date/time
						scrollToElement('step-date-time', 500);
					}
				}, 300);
			}
		});
	});

	// Fonction pour afficher le bon calendrier
	function showBookingCalendar(tour: string) {
		const container = document.getElementById('booking-calendar-container');
		const leftBankCalendar = document.getElementById('left-bank-calendar');
		const rightBankCalendar = document.getElementById('right-bank-calendar');
		
		if (container && leftBankCalendar && rightBankCalendar) {
			// Afficher le container
			container.classList.remove('hidden');
			
			// Masquer tous les calendriers
			leftBankCalendar.classList.add('hidden');
			rightBankCalendar.classList.add('hidden');
			
			// Afficher le bon calendrier
			if (tour === 'left-bank') {
				leftBankCalendar.classList.remove('hidden');
			} else if (tour === 'right-bank') {
				rightBankCalendar.classList.remove('hidden');
			}
		}
	}

	// Variables pour stocker les données de réservation
	let bookingData = {
		tour: '',
		participants: 0,
		tourType: '',
		date: '',
		time: '',
		name: '',
		email: '',
		phone: ''
	};

	// Mettre à jour la variable tour
	tourOptions.forEach(option => {
		option.addEventListener('click', () => {
			selectedTour = (option as HTMLElement).dataset.tour || '';
			bookingData.tour = selectedTour;
			// ...existing code...
		});
	});

	// Mettre à jour participants
	participantOptions.forEach(option => {
		option.addEventListener('click', () => {
			const count = parseInt((option as HTMLElement).dataset.count || '0');
			const isSelected = option.classList.contains('border-gray-600');
			
			if (!isSelected) {
				bookingData.participants = count;
			}
			// ...existing code...
		});
	});

	if (moreParticipantsSelect) {
		moreParticipantsSelect.addEventListener('change', () => {
			const count = parseInt(moreParticipantsSelect.value);
			if (count) {
				bookingData.participants = count;
			}
			// ...existing code...
		});
	}

	// Mettre à jour type de tour
	tourTypeOptions.forEach(option => {
		option.addEventListener('click', () => {
			const tourType = (option as HTMLElement).dataset.type;
			const isSelected = option.classList.contains('border-gray-600');
			
			if (!isSelected) {
				bookingData.tourType = tourType || '';
				// Reset date and time when changing tour type
				bookingData.date = '';
				bookingData.time = '';
			}
			// ...existing code...
		});
	});

	// Gestion des inputs pour Private Tour - afficher l'étape contact
	const stepContact = document.getElementById('step-contact');

	function checkPrivateTourCompletion() {
		const tourDateInput = document.getElementById('tour-date') as HTMLInputElement;
		const tourTimeSelect = document.getElementById('tour-time') as HTMLSelectElement;
		
		console.log('Checking private tour completion...', {
			tourType: bookingData.tourType,
			date: tourDateInput?.value,
			time: tourTimeSelect?.value
		});
		
		if (bookingData.tourType === 'private') {
			const date = tourDateInput?.value;
			const time = tourTimeSelect?.value;
			
			if (date && time) {
				bookingData.date = date;
				bookingData.time = time;
				
				console.log('Private tour data complete, showing contact step');
				
				setTimeout(() => {
					if (stepContact) {
						stepContact.classList.remove('hidden');
						stepContact.style.opacity = '0';
						stepContact.style.transition = 'opacity 0.5s ease-in';
						setTimeout(() => {
							stepContact.style.opacity = '1';
						}, 50);
					}
					// Scroll to step 5 contact
					scrollToElement('step-contact', 500);
				}, 300);
			}
		}
	}

	function attachPrivateTourListeners() {
		const dateInput = document.getElementById('tour-date') as HTMLInputElement;
		const timeSelect = document.getElementById('tour-time') as HTMLSelectElement;
		
		console.log('Attaching private tour listeners...', { dateInput, timeSelect });
		
		if (dateInput && timeSelect) {
			// Remove any existing listeners first
			dateInput.removeEventListener('change', checkPrivateTourCompletion);
			timeSelect.removeEventListener('change', checkPrivateTourCompletion);
			
			// Add new listeners
			dateInput.addEventListener('change', () => {
				console.log('Date changed:', dateInput.value);
				checkPrivateTourCompletion();
			});
			
			timeSelect.addEventListener('change', () => {
				console.log('Time changed:', timeSelect.value);
				checkPrivateTourCompletion();
			});
		}
	}

	// Use event delegation for private tour inputs
	document.addEventListener('change', (event) => {
		const target = event.target as HTMLElement;
		if (target.id === 'tour-date' || target.id === 'tour-time') {
			console.log('Private tour input changed:', target.id, (target as HTMLInputElement).value);
			checkPrivateTourCompletion();
		}
	});

	// Écouter les événements du calendrier pour Regular Tour
	window.addEventListener('dateSelected', (event: any) => {
		if (bookingData.tourType === 'regular') {
			bookingData.date = event.detail.date;
			bookingData.time = event.detail.time;
			
			setTimeout(() => {
				if (stepContact) {
					stepContact.classList.remove('hidden');
					stepContact.style.opacity = '0';
					stepContact.style.transition = 'opacity 0.5s ease-in';
					setTimeout(() => {
						stepContact.style.opacity = '1';
					}, 50);
				}
				// Scroll to step 5 contact
				scrollToElement('step-contact', 500);
			}, 300);
		}
	});

	// Gestion des inputs de contact - afficher le récapitulatif
	const contactNameInput = document.getElementById('contact-name') as HTMLInputElement;
	const contactEmailInput = document.getElementById('contact-email') as HTMLInputElement;
	const contactPhoneInput = document.getElementById('contact-phone') as HTMLInputElement;
	const stepSummary = document.getElementById('step-summary');

	function checkContactCompletion() {
		const name = contactNameInput?.value;
		const email = contactEmailInput?.value;
		
		if (name && email) {
			bookingData.name = name;
			bookingData.email = email;
			bookingData.phone = contactPhoneInput?.value || '';
			
			setTimeout(() => {
				updateSummaryDisplay();
				if (stepSummary) {
					stepSummary.classList.remove('hidden');
					stepSummary.style.opacity = '0';
					stepSummary.style.transition = 'opacity 0.5s ease-in';
					setTimeout(() => {
						stepSummary.style.opacity = '1';
					}, 50);
				}
				// Scroll to step 6 summary
				scrollToElement('step-summary', 500);
			}, 500);
		}
	}

	if (contactNameInput) {
		contactNameInput.addEventListener('input', checkContactCompletion);
	}
	if (contactEmailInput) {
		contactEmailInput.addEventListener('input', checkContactCompletion);
	}
	if (contactPhoneInput) {
		contactPhoneInput.addEventListener('input', () => {
			bookingData.phone = contactPhoneInput.value;
		});
	}

	function updateSummaryDisplay() {
		const summaryTour = document.getElementById('summary-tour');
		const summaryParticipants = document.getElementById('summary-participants');
		const summaryTourType = document.getElementById('summary-tour-type');
		const summaryDateTime = document.getElementById('summary-datetime');
		const summaryContact = document.getElementById('summary-contact');

		if (summaryTour) summaryTour.textContent = bookingData.tour === 'left-bank' ? 'Left Bank Tour' : 'Right Bank Tour';
		if (summaryParticipants) summaryParticipants.textContent = `${bookingData.participants} ${bookingData.participants === 1 ? 'person' : 'people'}`;
		if (summaryTourType) summaryTourType.textContent = bookingData.tourType === 'regular' ? 'Regular Tour' : 'Private Tour';
		if (summaryDateTime) {
			const formattedDate = new Date(bookingData.date).toLocaleDateString('en-US', { 
				weekday: 'long', 
				year: 'numeric', 
				month: 'long', 
				day: 'numeric' 
			});
			summaryDateTime.textContent = `${formattedDate} at ${bookingData.time}`;
		}
		if (summaryContact) {
			summaryContact.textContent = `${bookingData.name} (${bookingData.email})`;
		}
	}

	// Gestion des boutons du récapitulatif
	const confirmBookingBtn = document.getElementById('confirm-booking');
	const editBookingBtn = document.getElementById('edit-booking');

	if (confirmBookingBtn) {
		confirmBookingBtn.addEventListener('click', async () => {
			try {
				confirmBookingBtn.textContent = 'Sending...';
				confirmBookingBtn.setAttribute('disabled', 'true');

				// Simuler l'envoi d'email pour l'instant
				await new Promise(resolve => setTimeout(resolve, 2000));
				
				alert('Booking request sent successfully! We will contact you within 24 hours.');
			} catch (error) {
				alert('Error sending booking request. Please try again or contact us directly.');
				console.error('Booking error:', error);
			} finally {
				confirmBookingBtn.textContent = 'Confirm and Ask for Booking';
				confirmBookingBtn.removeAttribute('disabled');
			}
		});
	}
</script>
</script>
