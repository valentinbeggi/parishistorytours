---
import BaseLayout from "../layouts/BaseLayout.astro";
import Welcome from "../components/Welcome.astro";
import ToursAvailable from "../components/ToursAvailable.astro";
import Reviews from "../components/Reviews.astro";
import BookTour from "../components/BookTour.astro";
import "../styles/global.css";
import guidePhoto from "/photos_leo/guide-photo.webp";
---

<BaseLayout title="Paris History Tours">
	{/* Bannière de navigation fixe */}
	<nav class="hidden md:fixed top-0 left-0 w-full bg-white/95 border-b border-gray-200 z-50 shadow-sm">
		<div class="max-w-4xl mx-auto flex items-center justify-center gap-8 py-3">
			<a href="/tours/left-bank" class="text-gray-800 font-semibold hover:text-gray-600 transition">Left-Bank Tour</a>
			<a href="/tours/right-bank" class="text-gray-800 font-semibold hover:text-gray-600 transition">Right-Bank Tour</a>
			<a href="/" class="text-gray-800 font-semibold hover:text-gray-600 transition">Accueil</a>
		</div>
	</nav>
	
	<section class="py-8 md:py-24 px-2 max-w-full text-lg leading-8 bg-[#ebebef] min-h-screen" style='font-family: "Montserrat", Inter, system-ui, sans-serif;'>
		{/* Titre principal et sous-titre */}
		<div class="max-w-4xl mx-auto flex flex-col items-center justify-center mb-0">
			<h1 class="text-4xl md:text-6xl font-bold text-center text-gray-800 m-0 p-0 mb-4">
				Discover Paris differently
			</h1>
			{/* Séparateur fin entre les titres */}
			<div class="w-16 h-px bg-gray-400 mb-4"></div>
			<h2 class="text-xl md:text-2xl font-medium text-center text-gray-600 m-0 p-0">
				Immersive visits about WW2 History in Paris
			</h2>
		</div>
		{/* Partie photo et contenu sur fond clair */}
		<div class="flex justify-center mb-4 max-w-4xl mx-auto">
			<img 
				src={"/photos_leo/guide-photo.webp"} 
				alt="Guide Paris History Tours" 
				class="rounded-xl shadow-lg max-w-full h-auto mt-8 mb-8"
			/>
		</div>
		
		{/* Séparateur ligne */}
		<div class="flex justify-center mb-8">
			<div class="w-32 h-1 bg-gray-400 rounded-full"></div>
		</div>

		<Welcome />
		<ToursAvailable />
		<Reviews />
		<BookTour />
	</section>
	
	{/* Footer */}
	<footer class="w-full py-8 bg-gray-100 border-t border-gray-200 text-center text-gray-600 text-sm">
		<div class="max-w-4xl mx-auto flex flex-col md:flex-row items-center justify-between gap-8 px-4">
			<div class="hidden md:block">
				© {new Date().getFullYear()} Paris History Tours<br/>
				<span class="text-xs">By Clément Daguet</span>
			</div>
			<div class="flex flex-col md:flex-row gap-8">
				{/* Section Pages */}
				<div class="flex flex-col items-center md:items-start">
					<h4 class="font-semibold text-gray-800 mb-2">Pages</h4>
					<div class="flex flex-col gap-2 items-center md:items-start">
						<a href="/" class="text-gray-700 hover:text-gray-900 underline transition">Accueil</a>
						<a href="/tours/left-bank" class="text-gray-700 hover:text-gray-900 underline transition">Left Bank</a>
						<a href="/tours/right-bank" class="text-gray-700 hover:text-gray-900 underline transition">Right Bank</a>
					</div>
				</div>
				{/* Section Contact */}
				<div class="flex flex-col items-center md:items-start">
					<h4 class="font-semibold text-gray-800 mb-2">Contact</h4>
					<div class="flex flex-col gap-2 items-center md:items-start">
						<a href="https://wa.me/33620622480" target="_blank" class="text-gray-700 hover:text-gray-900 underline transition">WhatsApp redirection</a>
						<a href="mailto:clemdaguetschott@gmail.com" class="text-gray-700 hover:text-gray-900 underline transition">clemdaguetschott@gmail.com</a>
						<a href="https://share.google.com/aW3AOcxm9fGmHUy1k" target="_blank" class="text-gray-700 hover:text-gray-900 underline transition">Google</a>
					</div>
				</div>
			</div>
			<div class="md:hidden mt-8 pt-4 border-t border-gray-200">
				© {new Date().getFullYear()} Paris History Tours<br/>
				<span class="text-xs">By Clément Daguet</span>
			</div>
		</div>
	</footer>
</BaseLayout>

<script>
		// Ajout de la déclaration pour étendre l'interface Window
		declare global {
			interface Window {
				toggleReview: (index: number) => void;
			}
		}

		// Fonction pour afficher/masquer le contenu complet des reviews
		function toggleReview(index: number) {
			const preview = document.querySelector(`.review-preview-${index}`);
			const full = document.querySelector(`.review-full-${index}`);
			const button = document.querySelector(`.show-more-${index}`);
			
			if (!preview || !full || !button) {
				return;
			}

			if (preview.classList.contains('hidden')) {
				// Afficher le preview, masquer le complet
				preview.classList.remove('hidden');
				full.classList.add('hidden');
				button.textContent = 'Show more';
			} else {
				// Afficher le complet, masquer le preview
				preview.classList.add('hidden');
				full.classList.remove('hidden');
				button.textContent = 'Show less';
			}
		}

		// Rendre la fonction globale pour qu'elle soit accessible depuis l'onclick
		window.toggleReview = toggleReview;

		// Script pour le carrousel de reviews
		let currentReviewIndex = 0;
		const totalReviews = 4;
		const carousel = document.getElementById('review-carousel');
		const indicators = document.querySelectorAll('#review-indicators button');
		const prevBtn = document.getElementById('prev-review');
		const nextBtn = document.getElementById('next-review');

		function updateCarousel() {
			const offset = -currentReviewIndex * 100;
			if (carousel) {
				carousel.style.transform = `translateX(${offset}%)`;
			}
			
			// Mettre à jour les indicateurs
			indicators.forEach((indicator, index) => {
				indicator.classList.toggle('bg-gray-800', index === currentReviewIndex);
				indicator.classList.toggle('bg-gray-300', index !== currentReviewIndex);
			});
		}

		function nextReview() {
			currentReviewIndex = (currentReviewIndex + 1) % totalReviews;
			updateCarousel();
		}

		function prevReview() {
			currentReviewIndex = (currentReviewIndex - 1 + totalReviews) % totalReviews;
			updateCarousel();
		}

		// Event listeners
		if (nextBtn) {
			nextBtn.addEventListener('click', nextReview);
		}
		if (prevBtn) {
			prevBtn.addEventListener('click', prevReview);
		}

		// Indicateurs cliquables
		indicators.forEach((indicator, index) => {
			indicator.addEventListener('click', () => {
				currentReviewIndex = index;
				updateCarousel();
			});
		});

		// Auto-défilement
		setInterval(nextReview, 5000);

		// Script pour la sélection de tour
		const tourOptions = document.querySelectorAll('.tour-option');
		const selectedTourDiv = document.getElementById('selected-tour');
		const changeTourBtn = document.getElementById('change-tour');
		const stepParticipants = document.getElementById('step-participants');

		tourOptions.forEach(option => {
			option.addEventListener('click', () => {
				// Masquer les autres options avec animation
				tourOptions.forEach(opt => {
					if (opt !== option) {
						(opt as HTMLElement).style.opacity = '0';
						(opt as HTMLElement).style.transform = 'scale(0.8)';
						setTimeout(() => {
							(opt as HTMLElement).style.display = 'none';
						}, 300);
					}
				});
				
				// Animer l'option sélectionnée avec plus de douceur
				setTimeout(() => {
					option.classList.remove('md:w-1/2');
					option.classList.add('max-w-sm', 'mx-auto');
					(option as HTMLElement).style.transition = 'transform 0.6s ease-out';
					(option as HTMLElement).style.transform = 'scale(1.05)';
					
					setTimeout(() => {
						(option as HTMLElement).style.transform = 'scale(1)';
					}, 400);
				}, 300);
				
				// Afficher le bouton de retour avec animation
				setTimeout(() => {
					if (selectedTourDiv) {
						selectedTourDiv.classList.remove('hidden');
						selectedTourDiv.style.opacity = '0';
						selectedTourDiv.style.transition = 'opacity 0.4s ease-in';
						setTimeout(() => {
							selectedTourDiv.style.opacity = '1';
						}, 50);
					}
				}, 700);
				
				// Afficher le step 2 après la sélection du tour
				setTimeout(() => {
					if (stepParticipants) {
						stepParticipants.classList.remove('hidden');
						stepParticipants.style.opacity = '0';
						stepParticipants.style.transition = 'opacity 0.5s ease-in';
						setTimeout(() => {
							stepParticipants.style.opacity = '1';
						}, 50);
					}
				}, 800);
			});
		});

		// Bouton pour revenir en arrière
		if (changeTourBtn) {
			changeTourBtn.addEventListener('click', () => {
				// Masquer le bouton de retour
				if (selectedTourDiv) {
					selectedTourDiv.style.opacity = '0';
					setTimeout(() => {
						selectedTourDiv.classList.add('hidden');
					}, 200);
				}
				
				// Réafficher toutes les options avec animation
				tourOptions.forEach(opt => {
					(opt as HTMLElement).style.display = 'block';
					(opt as HTMLElement).style.opacity = '0';
					(opt as HTMLElement).style.transform = 'scale(0.8)';
					opt.classList.add('md:w-1/2');
					opt.classList.remove('max-w-sm', 'mx-auto');
					
					setTimeout(() => {
						(opt as HTMLElement).style.opacity = '1';
						(opt as HTMLElement).style.transform = 'scale(1)';
					}, 100);
				});
				
				// Masquer le step 2
				if (stepParticipants) {
					stepParticipants.style.opacity = '0';
					setTimeout(() => {
						stepParticipants.classList.add('hidden');
					}, 200);
				}
			});
		}

		// Script pour la sélection du nombre de participants
		const participantOptions = document.querySelectorAll('.participant-option');
		const moreParticipantsSelect = document.getElementById('more-participants') as HTMLSelectElement;

		function selectParticipantCount(count: number) {
			// Réinitialiser tous les styles
			participantOptions.forEach(opt => {
				opt.classList.remove('border-blue-500', 'bg-blue-600', 'text-white');
				opt.classList.add('border-gray-200', 'opacity-50');
				const numberDiv = opt.querySelector('div:first-child');
				const textDiv = opt.querySelector('div:last-child');
				if (numberDiv) numberDiv.classList.remove('text-white');
				if (textDiv) textDiv.classList.remove('text-white');
			});

			if (moreParticipantsSelect) {
				moreParticipantsSelect.value = '';
			}
		}

		// Event listeners pour les boutons 1-4
		participantOptions.forEach(option => {
			option.addEventListener('click', () => {
				const count = parseInt((option as HTMLElement).dataset.count || '0');
				
				// Réinitialiser d'abord
				selectParticipantCount(count);
				
				// Mettre en surbrillance l'option sélectionnée
				option.classList.remove('border-gray-200', 'opacity-50');
				option.classList.add('border-blue-500', 'bg-blue-600', 'text-white');
				
				const numberDiv = option.querySelector('div:first-child');
				const textDiv = option.querySelector('div:last-child');
				if (numberDiv) numberDiv.classList.add('text-white');
				if (textDiv) textDiv.classList.add('text-white');
			});
		});

		// Event listener pour le select "5 or more"
		if (moreParticipantsSelect) {
			moreParticipantsSelect.addEventListener('change', () => {
				const count = parseInt(moreParticipantsSelect.value);
				if (count) {
					// Réinitialiser les boutons 1-4
					participantOptions.forEach(opt => {
						opt.classList.remove('border-blue-500', 'bg-blue-600', 'text-white');
						opt.classList.add('border-gray-200', 'opacity-50');
						const numberDiv = opt.querySelector('div:first-child');
						const textDiv = opt.querySelector('div:last-child');
						if (numberDiv) numberDiv.classList.remove('text-white');
						if (textDiv) textDiv.classList.remove('text-white');
					});
				}
			});
		}
	</script>
			</div>
		</div>
	</section>
</BaseLayout>

<script>
		// Ajout de la déclaration pour étendre l'interface Window
		declare global {
			interface Window {
				toggleReview: (index: number) => void;
			}
		}

		// Fonction pour afficher/masquer le contenu complet des reviews
		function toggleReview(index: number) {
			const preview = document.querySelector(`.review-preview-${index}`);
			const full = document.querySelector(`.review-full-${index}`);
			const button = document.querySelector(`.show-more-${index}`);
			
			if (!preview || !full || !button) {
				return;
			}

			if (preview.classList.contains('hidden')) {
				// Afficher le preview, masquer le complet
				preview.classList.remove('hidden');
				full.classList.add('hidden');
				button.textContent = 'Show more';
			} else {
				// Afficher le complet, masquer le preview
				preview.classList.add('hidden');
				full.classList.remove('hidden');
				button.textContent = 'Show less';
			}
		}

		// Rendre la fonction globale pour qu'elle soit accessible depuis l'onclick
		window.toggleReview = toggleReview;

		// Script pour le carrousel de reviews
		let currentReviewIndex = 0;
		const totalReviews = 4;
		const carousel = document.getElementById('review-carousel');
		const indicators = document.querySelectorAll('#review-indicators button');
		const prevBtn = document.getElementById('prev-review');
		const nextBtn = document.getElementById('next-review');

		function updateCarousel() {
			const offset = -currentReviewIndex * 100;
			if (carousel) {
				carousel.style.transform = `translateX(${offset}%)`;
			}
			
			// Mettre à jour les indicateurs
			indicators.forEach((indicator, index) => {
				indicator.classList.toggle('bg-gray-800', index === currentReviewIndex);
				indicator.classList.toggle('bg-gray-300', index !== currentReviewIndex);
			});
		}

		function nextReview() {
			currentReviewIndex = (currentReviewIndex + 1) % totalReviews;
			updateCarousel();
		}

		function prevReview() {
			currentReviewIndex = (currentReviewIndex - 1 + totalReviews) % totalReviews;
			updateCarousel();
		}

		// Event listeners
		if (nextBtn) {
			nextBtn.addEventListener('click', nextReview);
		}
		if (prevBtn) {
			prevBtn.addEventListener('click', prevReview);
		}

		// Indicateurs cliquables
		indicators.forEach((indicator, index) => {
			indicator.addEventListener('click', () => {
				currentReviewIndex = index;
				updateCarousel();
			});
		});

		// Auto-défilement
		setInterval(nextReview, 5000);

		// Script pour la sélection de tour
		const tourOptions = document.querySelectorAll('.tour-option');
		const selectedTourDiv = document.getElementById('selected-tour');
		const changeTourBtn = document.getElementById('change-tour');
		const stepParticipants = document.getElementById('step-participants');

		tourOptions.forEach(option => {
			option.addEventListener('click', () => {
				// Masquer les autres options avec animation
				tourOptions.forEach(opt => {
					if (opt !== option) {
						(opt as HTMLElement).style.opacity = '0';
						(opt as HTMLElement).style.transform = 'scale(0.8)';
						setTimeout(() => {
							(opt as HTMLElement).style.display = 'none';
						}, 300);
					}
				});
				
				// Animer l'option sélectionnée avec plus de douceur
				setTimeout(() => {
					option.classList.remove('md:w-1/2');
					option.classList.add('max-w-sm', 'mx-auto');
					(option as HTMLElement).style.transition = 'transform 0.6s ease-out';
					(option as HTMLElement).style.transform = 'scale(1.05)';
					
					setTimeout(() => {
						(option as HTMLElement).style.transform = 'scale(1)';
					}, 400);
				}, 300);
				
				// Afficher le bouton de retour avec animation
				setTimeout(() => {
					if (selectedTourDiv) {
						selectedTourDiv.classList.remove('hidden');
						selectedTourDiv.style.opacity = '0';
						selectedTourDiv.style.transition = 'opacity 0.4s ease-in';
						setTimeout(() => {
							selectedTourDiv.style.opacity = '1';
						}, 50);
					}
				}, 700);
				
				// Afficher le step 2 après la sélection du tour
				setTimeout(() => {
					if (stepParticipants) {
						stepParticipants.classList.remove('hidden');
						stepParticipants.style.opacity = '0';
						stepParticipants.style.transition = 'opacity 0.5s ease-in';
						setTimeout(() => {
							stepParticipants.style.opacity = '1';
						}, 50);
					}
				}, 800);
			});
		});

		// Bouton pour revenir en arrière
		if (changeTourBtn) {
			changeTourBtn.addEventListener('click', () => {
				// Masquer le bouton de retour
				if (selectedTourDiv) {
					selectedTourDiv.style.opacity = '0';
					setTimeout(() => {
						selectedTourDiv.classList.add('hidden');
					}, 200);
				}
				
				// Réafficher toutes les options avec animation
				tourOptions.forEach(opt => {
					(opt as HTMLElement).style.display = 'block';
					(opt as HTMLElement).style.opacity = '0';
					(opt as HTMLElement).style.transform = 'scale(0.8)';
					opt.classList.add('md:w-1/2');
					opt.classList.remove('max-w-sm', 'mx-auto');
					
					setTimeout(() => {
						(opt as HTMLElement).style.opacity = '1';
						(opt as HTMLElement).style.transform = 'scale(1)';
					}, 100);
				});
				
				// Masquer le step 2
				if (stepParticipants) {
					stepParticipants.style.opacity = '0';
					setTimeout(() => {
						stepParticipants.classList.add('hidden');
					}, 200);
				}
			});
		}

		// Script pour la sélection du nombre de participants
		const participantOptions = document.querySelectorAll('.participant-option');
		const moreParticipantsSelect = document.getElementById('more-participants') as HTMLSelectElement;

		function selectParticipantCount(count: number) {
			// Réinitialiser tous les styles
			participantOptions.forEach(opt => {
				opt.classList.remove('border-blue-500', 'bg-blue-600', 'text-white');
				opt.classList.add('border-gray-200', 'opacity-50');
				const numberDiv = opt.querySelector('div:first-child');
				const textDiv = opt.querySelector('div:last-child');
				if (numberDiv) numberDiv.classList.remove('text-white');
				if (textDiv) textDiv.classList.remove('text-white');
			});

			if (moreParticipantsSelect) {
				moreParticipantsSelect.value = '';
			}
		}

		// Event listeners pour les boutons 1-4
		participantOptions.forEach(option => {
			option.addEventListener('click', () => {
				const count = parseInt((option as HTMLElement).dataset.count || '0');
				
				// Réinitialiser d'abord
				selectParticipantCount(count);
				
				// Mettre en surbrillance l'option sélectionnée
				option.classList.remove('border-gray-200', 'opacity-50');
				option.classList.add('border-blue-500', 'bg-blue-600', 'text-white');
				
				const numberDiv = option.querySelector('div:first-child');
				const textDiv = option.querySelector('div:last-child');
				if (numberDiv) numberDiv.classList.add('text-white');
				if (textDiv) textDiv.classList.add('text-white');
			});
		});

		// Event listener pour le select "5 or more"
		if (moreParticipantsSelect) {
			moreParticipantsSelect.addEventListener('change', () => {
				const count = parseInt(moreParticipantsSelect.value);
				if (count) {
					// Réinitialiser les boutons 1-4
					participantOptions.forEach(opt => {
						opt.classList.remove('border-blue-500', 'bg-blue-600', 'text-white');
						opt.classList.add('border-gray-200', 'opacity-50');
						const numberDiv = opt.querySelector('div:first-child');
						const textDiv = opt.querySelector('div:last-child');
						if (numberDiv) numberDiv.classList.remove('text-white');
						if (textDiv) textDiv.classList.remove('text-white');
					});
				}
			});
		}
	</script>
