---
import WhatsAppButton from "../../components/WhatsAppButton.astro";
import BookingCalendar from "../../components/BookingCalendar.tsx";
import BaseLayout from "../../layouts/BaseLayout.astro";

const stops = [
  { title: "Introduction", img: "/stops/left/1.jpg", description: "Presentation of the tour, and a quick history quiz to put everyone on the same page!" },
  { title: "Fall",         img: "/stops/left/1.jpg", description: "Discover how Paris fell to the German army in only 35 days of combat..." },
  { title: "Resistance",   img: "/stops/left/1.jpg", description: "Follow the journey of a French female Resistance fighter..." },
  { title: "Liberation",   img: "/stops/left/1.jpg", description: "Learn more about the fights that took place in Paris 81 years ago..." },
];
---

<BaseLayout title="Left-Bank tour">
  <section class="px-2 md:px-6 max-w-6xl mx-auto py-20">
    <h1 class="text-3xl font-bold mb-12 text-center">Paris – Left-Bank Tour</h1>
    <div class="relative w-full pb-24">
      <div class="relative h-[1400px] w-full flex justify-center">
        <div class="absolute left-1/2 top-0 h-full w-2 bg-gray-200 rounded-full -translate-x-1/2 z-0"></div>
        <div id="timeline-progress" class="absolute left-1/2 top-0 w-2 bg-gray-800 rounded-full -translate-x-1/2 z-10 transition-all duration-300" style="height: 0%"></div>

        {(() => {
          const addresses = [
            "Boulevard Saint Michel",
            "Palais du Luxembourg",
            "La Sorbonne",
            "Notre Dame de Paris"
          ];
          return [{ y: 60 }, { y: 420 }, { y: 780 }, { y: 1140 }].map((pos, idx) => (
            <>
              {/* Label Stop X au-dessus du point + adresse */}
              <div
                class="absolute flex justify-center items-center w-full"
                style={{
                  left: 0,
                  top: `calc(${pos.y}px - 60px)`,
                  pointerEvents: "none",
                  zIndex: 15,
                }}
              >
                <div class="bg-gray-100 text-gray-800 rounded-lg px-4 py-1 shadow border border-gray-200 font-semibold text-base flex items-center gap-3">
                  Stop {idx + 1}
                  <span class="flex items-center gap-1 ml-4 text-gray-600 italic font-normal">
                    {/* Icône location */}
                    <svg xmlns="http://www.w3.org/2000/svg" class="inline-block w-5 h-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 21c-4.418 0-8-6.268-8-10a8 8 0 1116 0c0 3.732-3.582 10-8 10z" />
                      <circle cx="12" cy="11" r="3" fill="currentColor" class="text-gray-400"/>
                    </svg>
                    {addresses[idx]}
                  </span>
                </div>
              </div>
              {/* Point de stop sur la ligne */}
              <div
                class="absolute"
                style={{
                  left: "50%",
                  top: `calc(${pos.y}px - 16px)`,
                  transform: "translateX(-50%)",
                  pointerEvents: "none",
                  zIndex: 10,
                }}
              >
                <div class="w-8 h-8 rounded-full bg-gray-800 border-4 border-white shadow-lg"></div>
              </div>
              {/* Groupe texte/photos alignés, photos penchées */}
              <div
                class="absolute flex items-center w-full"
                style={{
                  top: `calc(${pos.y}px + 32px)`,
                  pointerEvents: "auto",
                  justifyContent: "center",
                  zIndex: 20,
                }}
              >
                {/* Texte aligné à gauche */}
                <div class="flex-1 flex justify-end">
                  <div class="bg-white rounded-lg shadow px-6 py-5 border border-gray-100 max-w-[340px] text-left text-xl leading-relaxed font-medium transition-opacity duration-500" id={`desc-stop-${idx}`} style="opacity:1;">
                    <div class="font-bold text-2xl mb-2">{stops[idx].title}</div>
                    <div class="text-gray-700">{stops[idx].description}</div>
                  </div>
                </div>
                <div class="w-16"></div>
                {/* Images alignées à droite, effet penché, photo centrale plus grande */}
                <div class="flex-1 flex justify-start">
                  <div class="flex gap-4 transition-opacity duration-500" id={`images-stop-${idx}`} style="opacity:1;">
                    <img
                      src={stops[idx].img}
                      alt={stops[idx].title}
                      class={`object-cover rounded-lg shadow w-32 h-32 ${idx % 2 === 0 ? "rotate-2" : "-rotate-2"}`}
                    />
                    <img
                      src={stops[idx].img}
                      alt={stops[idx].title}
                      class={`object-cover rounded-lg shadow w-44 h-44 z-10 ${idx % 3 === 0 ? "-rotate-3" : "rotate-3"}`}
                    />
                    <img
                      src={stops[idx].img}
                      alt={stops[idx].title}
                      class={`object-cover rounded-lg shadow w-28 h-28 ${idx % 2 === 0 ? "rotate-6" : "-rotate-6"}`}
                    />
                  </div>
                </div>
              </div>
            </>
          ));
        })()}
      </div>
    </div>

    <div class="mt-16 flex flex-col md:flex-row gap-8 max-w-4xl mx-auto">
      <div class="flex-1">
        <BookingCalendar tour="left-bank" client:visible />
      </div>
      <div class="flex-1 flex flex-col gap-6">
        <div class="p-6 bg-gray-50 rounded-lg text-sm leading-6">
          <p><strong>Duration:</strong> 2 h</p>
          <p><strong>Distance:</strong> 2.5 km</p>
          <p><strong>Stops:</strong> 4</p>
        </div>
        <WhatsAppButton />
      </div>
    </div>

    <script>
      function updateTimeline() {
        const timeline = document.querySelector('.relative.h-\\[1100px\\].w-full.flex.justify-center');
        const progress = document.getElementById('timeline-progress');
        if (!timeline || !progress) return;
        const rect = timeline.getBoundingClientRect();
        const windowHeight = window.innerHeight;

        const stopsProgress = [0.0, 0.28, 0.56, 0.84];
        const totalHeight = (timeline as HTMLElement).offsetHeight;

        let visible = 0;
        if (rect.top < windowHeight && rect.bottom > 0) {
          visible = Math.min(1, Math.max(0, (windowHeight - rect.top) / (rect.height + windowHeight)));
        }

        let currentStop = 0;
        for (let i = 0; i < stopsProgress.length; i++) {
          if (visible >= stopsProgress[i]) currentStop = i;
        }

        // Correction : toujours afficher la progression jusqu'au dernier stop si visible >= dernier stop
        let stopProgress = stopsProgress[currentStop];
        if (visible >= stopsProgress[stopsProgress.length - 1]) {
          stopProgress = 1;
        }
        progress.style.height = `${stopProgress * 100}%`;

        // Affichage progressif des stops (images/texte)
        for (let i = 0; i < stopsProgress.length; i++) {
          const imgEl = document.getElementById("images-stop-" + i);
          const descEl = document.getElementById("desc-stop-" + i);
          // Correction : le dernier bloc s'affiche si visible >= stopsProgress[i]
          if (visible >= stopsProgress[i] || (i === stopsProgress.length - 1 && visible >= stopsProgress[i])) {
            if (imgEl) imgEl.style.opacity = "1";
            if (descEl) descEl.style.opacity = "1";
          } else {
            if (imgEl) imgEl.style.opacity = "0";
            if (descEl) descEl.style.opacity = "0";
          }
        }
      }
      window.addEventListener("scroll", updateTimeline);
      window.addEventListener("resize", updateTimeline);
      setTimeout(updateTimeline, 1000);
    </script>
  </section>
</BaseLayout>
